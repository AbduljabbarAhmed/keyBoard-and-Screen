bits 16
org 0x7C00

	cli
mov ah , 0x02
mov al ,8
mov dl , 0x80
mov ch , 0
mov dh , 0
mov cl , 2
mov bx, START
int 0x13
jmp START


times (510 - ($ - $$)) db 0
db 0x55, 0xAA
START:
cli
	
	xor ax , ax  
	mov ss , ax 
	mov sp , 0xffff
	
        mov edi, 0xB8000
        mov bx,ScanCodeTable
checkAgain:
call SetCursor	
in al,0x64
and al,0x01
jz checkAgain 	
Read:
in al,0x60
;###SPECIAL_CASES###
SHIFT:
cmp al,0x2A ; SH make
je shift
cmp al,0x36 ;SH make
je shift
SHIFTBREAK:
cmp al,0xAA;R SH break
jne SHIFTBREAK2
mov ch,0
mov bx,ScanCodeTable
jmp checkAgain
SHIFTBREAK2:
cmp al,0xB6;L SH break
jne CAPSLOCK
mov ch,0
mov bx,ScanCodeTable
jmp checkAgain
CAPSLOCK: ; make
cmp al,0x3A
jne Arrows
xor byte[STATUS],0x02;set 
jmp checkAgain
Arrows: ; [0xE0 arrow] or [0xE0 0xAA 0xE0 arrow] or [0xE0 0xB6 0xE0 arrow]
cmp AL,0xE0
jne BKSP
cAg:
in al,0x64
and al,0x01
jz cAg 	
in al,0x60
cmp AL,0xAA
je SHADE  
cmp AL,0xB6
je SHADE


LEFT:
cmp al,0x4B ; Left Arrow
jne RIGHT
sub edi,2
jmp checkAgain
RIGHT:
cmp al,0x4D ; Right Arrow
jne UP
add edi,2
jmp checkAgain
UP:
cmp al,0x48 ; up
jne DOWN
sub edi,0xA0 ;80 * 2
cmp edi,0xB8000
jnl checkAgain
add edi,0xA0
jmp checkAgain
DOWN:
cmp al,0x50 ;down
jne Del
add edi,0xA0
cmp edi,0xB8FA0
jng checkAgain
sub edi,0xA0
jmp checkAgain


Del:
;;;;
jmp checkAgain



;####### 0xE0


BKSP: 
cmp al,0x0E ; BKSP
jne TAB
mov ebp,edi
mov edi,0xB8FA0
mov dl,[edi]
HA:
mov cl,dl
sub edi,2
mov dl,[edi]
mov [edi],cl
cmp edi,ebp
jnl HA
jmp checkAgain
TAB:
cmp al,0x0F ; tab ******
jne ENTR
mov ecx,8
CC:
mov byte[edi],' '
inc edi
inc edi
loop CC
jmp checkAgain
ENTR:
cmp al,0x1C ; enter
jne CHARS
mov esi,edi
xor edx,edx
mov eax,edi
sub eax,0xB8000
mov ecx,0xA0
div ecx
sub edx,0xA0
sub edi,edx
jmp checkAgain


CHARS:

cmp al,0x80
jnb checkAgain
xlat
test byte[STATUS],0x02 ; CapsLock
jz print
cmp al,'a'
jb d
cmp al,'z'
ja d
sub AL,0x20 ; to cap
jmp print
d:
cmp al,'A'
jb print
cmp al,'Z'
ja print
add AL,0x20 ; to small
print:
mov ebp,edi
mov esi,0xFA0
mov dl,[edi]
HB:
mov cl,dl
add edi,2
mov dl,[edi]
mov [edi],cl
dec esi
cmp esi,0
jne HB
mov edi,ebp
mov [edi],al
inc edi
inc edi

jmp checkAgain


shift:
mov ch,1
mov bx,ScanCodeTableSH
jmp checkAgain

SHADE: ;[0xE0 0xAA 0xE0 arrow] or [0xE0 0xB6 0xE0 arrow]
mov esi,edi
AAG:
in al,0x64
and al,0x01
jz AAG
in al,0x60
cmp AL,0xE0
jne checkAgain
AAG2:
in al,0x64
and al,0x01
jz AAG2
in al,0x60
LEFTSH:
cmp al,0x4B ; Left Arrow
jne RIGHTSH
dec edi
dec edi
mov byte[edi+1],0x1F
jmp checkAgain
RIGHTSH:
cmp al,0x4D ; Right Arrow
jne UPSH
add edi,2
mov byte[edi+1],0x1F
jmp checkAgain
UPSH:
cmp al,0x48 ; up
jne DOWNSH
mov ecx,0x50 ;80 
LABEL:
sub edi,2
mov byte[edi+1],0x1F
loop LABEL
jmp checkAgain
DOWNSH:
cmp al,0x50 ;down
jne checkAgain
mov ecx,0x50 ;80 
LABEL2:
add edi,2
mov byte[edi+1],0x1F
loop LABEL2
jmp checkAgain


SetCursor:
push ebx
mov eax,edi
sub eax,0xB8000
mov ecx,160
xor edx,edx
div ecx
mov dh,al ; row
; column is already in edx and so in dl, but multiplied by 2
shr dl,1 ; div by 2
mov ah,0x02
mov bh,0
int 0x10
pop ebx
ret

ScanCodeTable:   db "//1234567890-=//qwertyuiop[]//asdfghjkl;'`/\zxcvbnm,.//// /"
ScanCodeTableSH: db '//!@#$%^&*()_+//QWERTYUIOP{}//ASDFGHJKL:"~/|ZXCVBNM<>?/// /' 
STATUS: db 0 ; X _ X _ X _ X _ X _ SH _ CL _ NL 
; shift at bit 2 , capslock at bit 1 and numlock at bit 0

times (0x400000 - 512) db 0

db 	0x63, 0x6F, 0x6E, 0x65, 0x63, 0x74, 0x69, 0x78, 0x00, 0x00, 0x00, 0x02
db	0x00, 0x01, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
db	0x20, 0x72, 0x5D, 0x33, 0x76, 0x62, 0x6F, 0x78, 0x00, 0x05, 0x00, 0x00
db	0x57, 0x69, 0x32, 0x6B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x78, 0x04, 0x11
db	0x00, 0x00, 0x00, 0x02, 0xFF, 0xFF, 0xE6, 0xB9, 0x49, 0x44, 0x4E, 0x1C
db	0x50, 0xC9, 0xBD, 0x45, 0x83, 0xC5, 0xCE, 0xC1, 0xB7, 0x2A, 0xE0, 0xF2
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00